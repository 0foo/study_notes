# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
disk_file = './extra_disk.vdi'
disk_file_2 = './extra_disk_2.vdi'

Vagrant.configure("2") do |config|

    # Define the first VM
    config.vm.define "box1" do |box1|

      box1.vm.box = "generic/rhel8"

      # private network
      box1.vm.network "private_network", ip: "192.168.56.10"
      
      # public network
      box1.vm.network "public_network", use_dhcp_assigned_default_route: true
      box1.vm.hostname = "vagrant-rhel-box-1"
    
      # create extra volumes for LVM study
      box1.vm.provider "virtualbox" do |vb|
        # volume 1
        vb.customize ["createhd", "--filename", disk_file, "--size", 10240] unless File.exist?(disk_file) # Size is in MB (10240MB = 10GB)
        vb.customize ["storageattach", :id, "--storagectl", "SATA Controller", "--port", 1, "--device", 0, "--type", "hdd", "--medium", disk_file]
        # volume 2
        vb.customize ["createhd", "--filename", disk_file_2, "--size", 10240] unless File.exist?(disk_file_2) # Size is in MB (10240MB = 10GB)
        vb.customize ["storageattach", :id, "--storagectl", "SATA Controller", "--port", 2, "--device", 0, "--type", "hdd", "--medium", disk_file_2]
      end
    end
  
    # Define the second VM
    config.vm.define "box2" do |box2|
      box2.vm.box = "generic/rhel8"
      box2.vm.network "public_network", use_dhcp_assigned_default_route: true
      box2.vm.hostname = "vagrant-rhel-box-2"
    
    end
  
    # Define the third VM
    config.vm.define "box3" do |box3|
      box3.vm.box = "generic/rhel8"
      box3.vm.network "public_network", use_dhcp_assigned_default_route: true
      box3.vm.hostname = "vagrant-rhel-box-3"
    
    end
  


  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessable to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
