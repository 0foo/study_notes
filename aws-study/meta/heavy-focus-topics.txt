heavy-focus-topics.txt

Know these cold!

Optimising S3 Key (File) names for heavy load (http://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html)
	* add prefixes to filenames to parallelize 
 	* 3,500 PUT/COPY/POST/DELETE and 5,500 GET/HEAD requests per second per prefix in a bucket. 
	* There are no limits to the number of prefixes in a bucket. You can increase your read or write performance by parallelizing reads. For example, if you create 10 prefixes in an Amazon S3 bucket to parallelize reads, you could scale your read performance to 55,000 read requests per second. 
	* can use cloudfront for heavy asset READs 
	* elasticache for heavy data reads
	* amazon s3 transfer acceleration 
		*  Transfer Acceleration uses the globally distributed edge locations in CloudFront to accelerate data transport over geographical distances.


s3 url format
	* bucket urls: https://s3-<region>.amazonaws.com/<bucketname>
	* website urls: https://<bucketname>.s3-website-<region>.amazonaws.com

s3 data consistency model
	* put is write then read
	* others are eventual consistency


Optimising DynamoDB operations (http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScanGuidelines.html)



Dynamo RCU and WCU
----

SNS protocols supported
----
    * Application
    * SMS text message
    * Email
    * Email-JSON
    * AWS SQS
    * HTTP
    * HTTPS

Sections of Cloudformation Template
-----
	Parameters
	Conditions
	Mappings
	Transform
		* used to reference additional code stored in s3
	Resources
	Outputs


CodePipeLine appspec hooks
-----
Lambda hooks
* BeforeAllowTraffic
	* tasks specified to run before traffic sent to newly deployed lambda
	* i.e. tests or whatever before it gets traffic
* AfterAllowTraffic
	* tasks/functions after traffic routed to newly deployed lambda functions
	* correctly accepting traffic, performing as expected


EC2 hooks
* Elb related:
	 * BeforeBlockTraffic
	 	* before deregistered from ELB
	 * BlockTraffic
	 	* deregisters your instances from ELB
	 * AfterBlockTraffic
	 	* after deregistered

* Application Related
	ApplicationStop
	DownloadBundle
	BeforeInstall
	Install
	AfterInstall
	ApplicationStart
	ValidateService

* Reregister with ELB
	* BeforeAllowTraffic
	* AllowTraffic
	* AfterAllowTraffic



ELB and session cookies (http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-sticky-sessions.html)
Resources that Elastic Beanstalk can create
CloudFormation Output section and Function you would use
SNS message format

Know/review limits for S3, DynamoDB, EC2, SNS, and SQS. Understanding the service limits would have helped with at least 5 questions.
good understanding of the lambda concurrency and scale model, 
understanding of how global and local indices relate to provisioned throughput, 
how an identity broker integrates with sts, 
and a solid understanding of ec2 basics (amis, ebs vs instance store, etc).
DynamoDB (~15/55 questions) and S3 (~12/55 questions)